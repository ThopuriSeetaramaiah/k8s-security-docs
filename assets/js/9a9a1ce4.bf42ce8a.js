"use strict";(self.webpackChunkk8s_security_docs=self.webpackChunkk8s_security_docs||[]).push([[7912],{8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var i=s(6540);const r={},l=i.createContext(r);function o(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(l.Provider,{value:n},e.children)}},9895:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"best-practices/rbac","title":"Role-Based Access Control (RBAC)","description":"Role-Based Access Control (RBAC) is a method of regulating access to resources based on the roles of individual users. This guide covers best practices for implementing RBAC in Kubernetes to secure access to your cluster resources.","source":"@site/docs/best-practices/rbac.md","sourceDirName":"best-practices","slug":"/best-practices/rbac","permalink":"/best-practices/rbac","draft":false,"unlisted":false,"editUrl":"https://github.com/ThopuriSeetaramaiah/k8s-security-docs/tree/main/docs/best-practices/rbac.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Network Policies","permalink":"/best-practices/network-policies"},"next":{"title":"kube-bench","permalink":"/security-tools/kube-bench"}}');var r=s(4848),l=s(8453);const o={sidebar_position:4},c="Role-Based Access Control (RBAC)",a={},t=[{value:"RBAC Components",id:"rbac-components",level:2},{value:"Creating Roles and ClusterRoles",id:"creating-roles-and-clusterroles",level:2},{value:"Role (Namespace-Scoped)",id:"role-namespace-scoped",level:3},{value:"ClusterRole (Cluster-Wide)",id:"clusterrole-cluster-wide",level:3},{value:"Creating RoleBindings and ClusterRoleBindings",id:"creating-rolebindings-and-clusterrolebindings",level:2},{value:"RoleBinding (Namespace-Scoped)",id:"rolebinding-namespace-scoped",level:3},{value:"ClusterRoleBinding (Cluster-Wide)",id:"clusterrolebinding-cluster-wide",level:3},{value:"Subject Types",id:"subject-types",level:2},{value:"ServiceAccount Example",id:"serviceaccount-example",level:3},{value:"Common RBAC Patterns",id:"common-rbac-patterns",level:2},{value:"Namespace Admin",id:"namespace-admin",level:3},{value:"Read-Only User",id:"read-only-user",level:3},{value:"Developer Role",id:"developer-role",level:3},{value:"RBAC Best Practices",id:"rbac-best-practices",level:2},{value:"Verifying RBAC Permissions",id:"verifying-rbac-permissions",level:2},{value:"Troubleshooting RBAC",id:"troubleshooting-rbac",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"role-based-access-control-rbac",children:"Role-Based Access Control (RBAC)"})}),"\n",(0,r.jsx)(n.p,{children:"Role-Based Access Control (RBAC) is a method of regulating access to resources based on the roles of individual users. This guide covers best practices for implementing RBAC in Kubernetes to secure access to your cluster resources."}),"\n",(0,r.jsx)(n.h2,{id:"rbac-components",children:"RBAC Components"}),"\n",(0,r.jsx)(n.p,{children:"Kubernetes RBAC has four primary components:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Roles"}),": Define permissions within a namespace"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ClusterRoles"}),": Define cluster-wide permissions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RoleBindings"}),": Bind roles to users within a namespace"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ClusterRoleBindings"}),": Bind cluster roles to users across the cluster"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"creating-roles-and-clusterroles",children:"Creating Roles and ClusterRoles"}),"\n",(0,r.jsx)(n.h3,{id:"role-namespace-scoped",children:"Role (Namespace-Scoped)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: pod-reader\nrules:\n- apiGroups: [""]\n  resources: ["pods"]\n  verbs: ["get", "watch", "list"]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"clusterrole-cluster-wide",children:"ClusterRole (Cluster-Wide)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: pod-reader\nrules:\n- apiGroups: [""]\n  resources: ["pods"]\n  verbs: ["get", "watch", "list"]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"creating-rolebindings-and-clusterrolebindings",children:"Creating RoleBindings and ClusterRoleBindings"}),"\n",(0,r.jsx)(n.h3,{id:"rolebinding-namespace-scoped",children:"RoleBinding (Namespace-Scoped)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: read-pods\n  namespace: default\nsubjects:\n- kind: User\n  name: jane\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: Role\n  name: pod-reader\n  apiGroup: rbac.authorization.k8s.io\n"})}),"\n",(0,r.jsx)(n.h3,{id:"clusterrolebinding-cluster-wide",children:"ClusterRoleBinding (Cluster-Wide)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: read-pods-global\nsubjects:\n- kind: Group\n  name: monitoring-team\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: ClusterRole\n  name: pod-reader\n  apiGroup: rbac.authorization.k8s.io\n"})}),"\n",(0,r.jsx)(n.h2,{id:"subject-types",children:"Subject Types"}),"\n",(0,r.jsx)(n.p,{children:"RBAC supports three types of subjects:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User"}),": Regular users authenticated to the cluster"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Group"}),": Groups of users"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ServiceAccount"}),": Service accounts for pods"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"serviceaccount-example",children:"ServiceAccount Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: monitoring-sa\n  namespace: monitoring\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: monitoring-role-binding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: monitoring-sa\n  namespace: monitoring\nroleRef:\n  kind: Role\n  name: pod-reader\n  apiGroup: rbac.authorization.k8s.io\n"})}),"\n",(0,r.jsx)(n.h2,{id:"common-rbac-patterns",children:"Common RBAC Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"namespace-admin",children:"Namespace Admin"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: team-a\n  name: namespace-admin\nrules:\n- apiGroups: ["", "extensions", "apps"]\n  resources: ["*"]\n  verbs: ["*"]\n- apiGroups: ["batch"]\n  resources: ["jobs", "cronjobs"]\n  verbs: ["*"]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"read-only-user",children:"Read-Only User"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: read-only-user\nrules:\n- apiGroups: [""]\n  resources: ["pods", "services", "configmaps", "secrets", "persistentvolumeclaims"]\n  verbs: ["get", "list", "watch"]\n- apiGroups: ["apps"]\n  resources: ["deployments", "replicasets", "statefulsets", "daemonsets"]\n  verbs: ["get", "list", "watch"]\n- apiGroups: ["batch"]\n  resources: ["jobs", "cronjobs"]\n  verbs: ["get", "list", "watch"]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"developer-role",children:"Developer Role"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: development\n  name: developer\nrules:\n- apiGroups: [""]\n  resources: ["pods", "pods/log", "services", "configmaps", "secrets", "persistentvolumeclaims"]\n  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]\n- apiGroups: ["apps"]\n  resources: ["deployments", "replicasets"]\n  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]\n- apiGroups: ["batch"]\n  resources: ["jobs", "cronjobs"]\n  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"rbac-best-practices",children:"RBAC Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Follow the Principle of Least Privilege"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Grant only the permissions necessary for users to perform their tasks"}),"\n",(0,r.jsx)(n.li,{children:"Avoid using wildcard resources and verbs when possible"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use Groups for Access Management"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Assign permissions to groups rather than individual users"}),"\n",(0,r.jsx)(n.li,{children:"Makes it easier to manage permissions as teams change"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Namespace Isolation"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use namespaces to isolate teams and applications"}),"\n",(0,r.jsx)(n.li,{children:"Assign namespace-scoped roles when possible"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Avoid Direct ClusterRole Bindings"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Limit the number of cluster-wide permissions"}),"\n",(0,r.jsx)(n.li,{children:"Use namespace-scoped roles and bindings when possible"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Regularly Audit RBAC Permissions"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Review who has access to what resources"}),"\n",(0,r.jsx)(n.li,{children:"Remove unnecessary permissions"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use Default Roles When Appropriate"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Kubernetes provides default roles like ",(0,r.jsx)(n.code,{children:"view"}),", ",(0,r.jsx)(n.code,{children:"edit"}),", and ",(0,r.jsx)(n.code,{children:"admin"})]}),"\n",(0,r.jsx)(n.li,{children:"Use these roles instead of creating custom ones when possible"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implement Role Aggregation"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use the aggregationRule field to combine multiple ClusterRoles"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Document Your RBAC Policies"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Maintain documentation of your RBAC design"}),"\n",(0,r.jsx)(n.li,{children:"Include justifications for elevated permissions"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"verifying-rbac-permissions",children:"Verifying RBAC Permissions"}),"\n",(0,r.jsx)(n.p,{children:"Check if a user can perform specific actions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kubectl auth can-i get pods --namespace default --as jane\n"})}),"\n",(0,r.jsx)(n.p,{children:"List all resources a user can access:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kubectl auth can-i --list --as jane\n"})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting-rbac",children:"Troubleshooting RBAC"}),"\n",(0,r.jsx)(n.p,{children:"Common RBAC issues and solutions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Forbidden errors in logs"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check the error message for the specific resource and verb"}),"\n",(0,r.jsx)(n.li,{children:"Verify the role has the necessary permissions"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"ServiceAccount doesn't have expected permissions"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Verify the ServiceAccount is correctly mounted in the pod"}),"\n",(0,r.jsx)(n.li,{children:"Check that the RoleBinding references the correct ServiceAccount"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Permissions work in one namespace but not another"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Verify that the RoleBinding exists in the correct namespace"}),"\n",(0,r.jsx)(n.li,{children:"Check if you're using a Role (namespace-scoped) instead of a ClusterRole"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.p,{children:["After implementing RBAC, explore the ",(0,r.jsx)(n.a,{href:"../security-tools/kube-bench",children:"Security Tools"})," section to learn about tools that can help you assess and enhance your Kubernetes security posture."]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);