"use strict";(self.webpackChunkk8s_security_docs=self.webpackChunkk8s_security_docs||[]).push([[1701],{8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>t});var s=i(6540);const l={},o=s.createContext(l);function r(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},8696:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"best-practices/network-policies","title":"Network Policies","description":"Network Policies are a crucial security feature in Kubernetes that allow you to control the traffic flow between pods. This guide covers best practices for implementing Network Policies to secure your cluster communications.","source":"@site/docs/best-practices/network-policies.md","sourceDirName":"best-practices","slug":"/best-practices/network-policies","permalink":"/docs/best-practices/network-policies","draft":false,"unlisted":false,"editUrl":"https://github.com/ThopuriSeetaramaiah/k8s-security-docs/tree/main/docs/best-practices/network-policies.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Pod Security","permalink":"/docs/best-practices/pod-security"},"next":{"title":"Role-Based Access Control (RBAC)","permalink":"/docs/best-practices/rbac"}}');var l=i(4848),o=i(8453);const r={sidebar_position:3},t="Network Policies",c={},a=[{value:"Understanding Network Policies",id:"understanding-network-policies",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Default Deny Policies",id:"default-deny-policies",level:2},{value:"Default Deny All Ingress Traffic",id:"default-deny-all-ingress-traffic",level:3},{value:"Default Deny All Egress Traffic",id:"default-deny-all-egress-traffic",level:3},{value:"Default Deny All Traffic (Both Ingress and Egress)",id:"default-deny-all-traffic-both-ingress-and-egress",level:3},{value:"Allowing Specific Traffic",id:"allowing-specific-traffic",level:2},{value:"Allow Traffic Between Specific Pods",id:"allow-traffic-between-specific-pods",level:3},{value:"Allow Traffic From Specific Namespaces",id:"allow-traffic-from-specific-namespaces",level:3},{value:"Allow External Traffic to Specific Pods",id:"allow-external-traffic-to-specific-pods",level:3},{value:"Advanced Network Policies",id:"advanced-network-policies",level:2},{value:"Combining Selectors (AND Logic)",id:"combining-selectors-and-logic",level:3},{value:"Multiple Rules (OR Logic)",id:"multiple-rules-or-logic",level:3},{value:"Egress Policies",id:"egress-policies",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"network-policies",children:"Network Policies"})}),"\n",(0,l.jsx)(n.p,{children:"Network Policies are a crucial security feature in Kubernetes that allow you to control the traffic flow between pods. This guide covers best practices for implementing Network Policies to secure your cluster communications."}),"\n",(0,l.jsx)(n.h2,{id:"understanding-network-policies",children:"Understanding Network Policies"}),"\n",(0,l.jsx)(n.p,{children:"Network Policies act as a firewall for pod communications, allowing you to:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Control which pods can communicate with each other"}),"\n",(0,l.jsx)(n.li,{children:"Control which namespaces can communicate with each other"}),"\n",(0,l.jsx)(n.li,{children:"Control external access to pods"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,l.jsx)(n.p,{children:"To use Network Policies, your cluster must have a network plugin that supports them, such as:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Calico"}),"\n",(0,l.jsx)(n.li,{children:"Cilium"}),"\n",(0,l.jsx)(n.li,{children:"Antrea"}),"\n",(0,l.jsx)(n.li,{children:"Weave Net"}),"\n",(0,l.jsx)(n.li,{children:"Kube-router"}),"\n"]}),"\n",(0,l.jsx)(n.admonition,{type:"caution",children:(0,l.jsx)(n.p,{children:"The default Kubernetes network plugin (kubenet) does not support Network Policies. Make sure your cluster is using a compatible network plugin."})}),"\n",(0,l.jsx)(n.h2,{id:"default-deny-policies",children:"Default Deny Policies"}),"\n",(0,l.jsx)(n.p,{children:"Start by implementing default deny policies to block all traffic, then selectively allow required communications."}),"\n",(0,l.jsx)(n.h3,{id:"default-deny-all-ingress-traffic",children:"Default Deny All Ingress Traffic"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-ingress\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n"})}),"\n",(0,l.jsx)(n.h3,{id:"default-deny-all-egress-traffic",children:"Default Deny All Egress Traffic"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-egress\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n"})}),"\n",(0,l.jsx)(n.h3,{id:"default-deny-all-traffic-both-ingress-and-egress",children:"Default Deny All Traffic (Both Ingress and Egress)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-all\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n"})}),"\n",(0,l.jsx)(n.h2,{id:"allowing-specific-traffic",children:"Allowing Specific Traffic"}),"\n",(0,l.jsx)(n.p,{children:"After implementing default deny policies, you can selectively allow required traffic."}),"\n",(0,l.jsx)(n.h3,{id:"allow-traffic-between-specific-pods",children:"Allow Traffic Between Specific Pods"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-frontend-to-backend\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: backend\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: frontend\n    ports:\n    - protocol: TCP\n      port: 8080\n"})}),"\n",(0,l.jsx)(n.h3,{id:"allow-traffic-from-specific-namespaces",children:"Allow Traffic From Specific Namespaces"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-monitoring-namespace\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          purpose: monitoring\n"})}),"\n",(0,l.jsx)(n.h3,{id:"allow-external-traffic-to-specific-pods",children:"Allow External Traffic to Specific Pods"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-external-to-web\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: web\n  policyTypes:\n  - Ingress\n  ingress:\n  - from: []\n    ports:\n    - protocol: TCP\n      port: 80\n    - protocol: TCP\n      port: 443\n"})}),"\n",(0,l.jsx)(n.h2,{id:"advanced-network-policies",children:"Advanced Network Policies"}),"\n",(0,l.jsx)(n.h3,{id:"combining-selectors-and-logic",children:"Combining Selectors (AND Logic)"}),"\n",(0,l.jsxs)(n.p,{children:["When you specify multiple selectors in the same ",(0,l.jsx)(n.code,{children:"from"})," array element, they are ANDed together:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-specific-pods-from-namespace\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: database\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          purpose: backend\n      podSelector:\n        matchLabels:\n          role: db-client\n"})}),"\n",(0,l.jsx)(n.h3,{id:"multiple-rules-or-logic",children:"Multiple Rules (OR Logic)"}),"\n",(0,l.jsxs)(n.p,{children:["When you specify multiple array elements in ",(0,l.jsx)(n.code,{children:"from"}),", they are ORed together:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-multiple-sources\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: api\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: frontend\n    - podSelector:\n        matchLabels:\n          app: admin-ui\n"})}),"\n",(0,l.jsx)(n.h3,{id:"egress-policies",children:"Egress Policies"}),"\n",(0,l.jsx)(n.p,{children:"Control outbound traffic from pods:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-dns-and-api\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: frontend\n  policyTypes:\n  - Egress\n  egress:\n  - to:\n    - podSelector:\n        matchLabels:\n          app: api\n    ports:\n    - protocol: TCP\n      port: 8080\n  - to: []\n    ports:\n    - protocol: UDP\n      port: 53\n"})}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Start with default deny policies"})," in all namespaces"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Use labels consistently"})," across your pods and namespaces"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Implement the principle of least privilege"})," by only allowing necessary traffic"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Document your network policies"})," to understand the allowed communication paths"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Test your policies"})," thoroughly before applying them in production"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Monitor denied connections"})," to identify potential issues"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Use namespace isolation"})," for multi-tenant clusters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Regularly review and update"})," your network policies"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,l.jsx)(n.p,{children:"If your Network Policies aren't working as expected:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Verify your network plugin supports Network Policies"}),"\n",(0,l.jsx)(n.li,{children:"Check pod and namespace labels match your selectors"}),"\n",(0,l.jsxs)(n.li,{children:["Use tools like ",(0,l.jsx)(n.code,{children:"kubectl describe networkpolicy <name>"})," to inspect policies"]}),"\n",(0,l.jsx)(n.li,{children:"Test connectivity with temporary debug pods"}),"\n",(0,l.jsx)(n.li,{children:"Check logs from your network plugin"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,l.jsxs)(n.p,{children:["After implementing Network Policies, proceed to ",(0,l.jsx)(n.a,{href:"rbac",children:"RBAC"})," to learn how to secure access to your Kubernetes API."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);