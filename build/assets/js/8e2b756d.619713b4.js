"use strict";(self.webpackChunkk8s_security_docs=self.webpackChunkk8s_security_docs||[]).push([[844],{2282:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"best-practices/pod-security","title":"Pod Security","description":"Securing pods is essential for protecting your applications running in Kubernetes. This guide covers best practices for pod security.","source":"@site/docs/best-practices/pod-security.md","sourceDirName":"best-practices","slug":"/best-practices/pod-security","permalink":"/docs/best-practices/pod-security","draft":false,"unlisted":false,"editUrl":"https://github.com/ThopuriSeetaramaiah/k8s-security-docs/tree/main/docs/best-practices/pod-security.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Cluster Security","permalink":"/docs/best-practices/cluster-security"},"next":{"title":"Network Policies","permalink":"/docs/best-practices/network-policies"}}');var r=i(4848),t=i(8453);const a={sidebar_position:2},c="Pod Security",o={},l=[{value:"Pod Security Standards",id:"pod-security-standards",level:2},{value:"Implementing Pod Security Standards",id:"implementing-pod-security-standards",level:2},{value:"Using Pod Security Admission Controller",id:"using-pod-security-admission-controller",level:3},{value:"Using Pod Security Policies (Legacy)",id:"using-pod-security-policies-legacy",level:3},{value:"Security Context",id:"security-context",level:2},{value:"Resource Limits",id:"resource-limits",level:2},{value:"Service Accounts",id:"service-accounts",level:2},{value:"Image Security",id:"image-security",level:2},{value:"Use Trusted Images",id:"use-trusted-images",level:3},{value:"Image Pull Secrets",id:"image-pull-secrets",level:3},{value:"Runtime Security",id:"runtime-security",level:2},{value:"Seccomp Profiles",id:"seccomp-profiles",level:3},{value:"AppArmor Profiles",id:"apparmor-profiles",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"pod-security",children:"Pod Security"})}),"\n",(0,r.jsx)(n.p,{children:"Securing pods is essential for protecting your applications running in Kubernetes. This guide covers best practices for pod security."}),"\n",(0,r.jsx)(n.h2,{id:"pod-security-standards",children:"Pod Security Standards"}),"\n",(0,r.jsx)(n.p,{children:"Kubernetes defines three Pod Security Standards:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Privileged"}),": Unrestricted policy, providing the widest possible level of permissions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Baseline"}),": Minimally restrictive policy that prevents known privilege escalations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Restricted"}),": Heavily restricted policy, following current pod hardening best practices"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implementing-pod-security-standards",children:"Implementing Pod Security Standards"}),"\n",(0,r.jsx)(n.h3,{id:"using-pod-security-admission-controller",children:"Using Pod Security Admission Controller"}),"\n",(0,r.jsx)(n.p,{children:"In Kubernetes 1.23+, you can use the built-in Pod Security Admission Controller:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# Namespace-level enforcement\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: my-secure-namespace\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\n"})}),"\n",(0,r.jsx)(n.h3,{id:"using-pod-security-policies-legacy",children:"Using Pod Security Policies (Legacy)"}),"\n",(0,r.jsx)(n.p,{children:"For Kubernetes versions before 1.25:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: restricted\nspec:\n  privileged: false\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  volumes:\n    - 'configMap'\n    - 'emptyDir'\n    - 'projected'\n    - 'secret'\n    - 'downwardAPI'\n    - 'persistentVolumeClaim'\n  hostNetwork: false\n  hostIPC: false\n  hostPID: false\n  runAsUser:\n    rule: 'MustRunAsNonRoot'\n  seLinux:\n    rule: 'RunAsAny'\n  supplementalGroups:\n    rule: 'MustRunAs'\n    ranges:\n      - min: 1\n        max: 65535\n  fsGroup:\n    rule: 'MustRunAs'\n    ranges:\n      - min: 1\n        max: 65535\n  readOnlyRootFilesystem: true\n"})}),"\n",(0,r.jsx)(n.h2,{id:"security-context",children:"Security Context"}),"\n",(0,r.jsx)(n.p,{children:"Always define a security context for your pods and containers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  name: security-context-demo\nspec:\n  securityContext:\n    runAsNonRoot: true\n    seccompProfile:\n      type: RuntimeDefault\n  containers:\n  - name: sec-ctx-demo\n    image: busybox:1.28\n    command: ["sh", "-c", "sleep 1h"]\n    securityContext:\n      allowPrivilegeEscalation: false\n      capabilities:\n        drop:\n          - ALL\n      readOnlyRootFilesystem: true\n'})}),"\n",(0,r.jsx)(n.h2,{id:"resource-limits",children:"Resource Limits"}),"\n",(0,r.jsx)(n.p,{children:"Always set resource limits to prevent resource exhaustion attacks:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  name: resource-limits-demo\nspec:\n  containers:\n  - name: resource-limits-container\n    image: nginx\n    resources:\n      limits:\n        cpu: "1"\n        memory: "512Mi"\n      requests:\n        cpu: "0.5"\n        memory: "256Mi"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"service-accounts",children:"Service Accounts"}),"\n",(0,r.jsx)(n.p,{children:"Limit service account permissions and use dedicated service accounts:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: restricted-sa\n  namespace: default\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: restricted-role\n  namespace: default\nrules:\n- apiGroups: [""]\n  resources: ["pods"]\n  verbs: ["get", "list"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: restricted-role-binding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: restricted-sa\n  namespace: default\nroleRef:\n  kind: Role\n  name: restricted-role\n  apiGroup: rbac.authorization.k8s.io\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then use this service account in your pod:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: sa-demo\nspec:\n  serviceAccountName: restricted-sa\n  containers:\n  - name: sa-container\n    image: nginx\n"})}),"\n",(0,r.jsx)(n.h2,{id:"image-security",children:"Image Security"}),"\n",(0,r.jsx)(n.h3,{id:"use-trusted-images",children:"Use Trusted Images"}),"\n",(0,r.jsx)(n.p,{children:"Always use images from trusted registries and verify their integrity:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: trusted-image-demo\nspec:\n  containers:\n  - name: trusted-container\n    image: gcr.io/distroless/static-debian11:nonroot\n    imagePullPolicy: Always\n"})}),"\n",(0,r.jsx)(n.h3,{id:"image-pull-secrets",children:"Image Pull Secrets"}),"\n",(0,r.jsx)(n.p,{children:"Use image pull secrets for private registries:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Secret\nmetadata:\n  name: registry-credentials\n  namespace: default\ntype: kubernetes.io/dockerconfigjson\ndata:\n  .dockerconfigjson: <base64-encoded-docker-config>\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: private-image-demo\nspec:\n  containers:\n  - name: private-container\n    image: private-registry.example.com/my-app:v1.0.0\n  imagePullSecrets:\n  - name: registry-credentials\n"})}),"\n",(0,r.jsx)(n.h2,{id:"runtime-security",children:"Runtime Security"}),"\n",(0,r.jsx)(n.h3,{id:"seccomp-profiles",children:"Seccomp Profiles"}),"\n",(0,r.jsx)(n.p,{children:"Apply seccomp profiles to restrict system calls:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: seccomp-demo\nspec:\n  securityContext:\n    seccompProfile:\n      type: Localhost\n      localhostProfile: profiles/audit.json\n  containers:\n  - name: seccomp-container\n    image: nginx\n"})}),"\n",(0,r.jsx)(n.h3,{id:"apparmor-profiles",children:"AppArmor Profiles"}),"\n",(0,r.jsx)(n.p,{children:"Apply AppArmor profiles for additional protection:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: apparmor-demo\n  annotations:\n    container.apparmor.security.beta.kubernetes.io/apparmor-container: runtime/default\nspec:\n  containers:\n  - name: apparmor-container\n    image: nginx\n"})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.p,{children:["After implementing pod security measures, proceed to ",(0,r.jsx)(n.a,{href:"network-policies",children:"Network Policies"})," to learn how to secure communication between pods."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var s=i(6540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);